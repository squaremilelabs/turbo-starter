// --------------------------------------------------------------------------------------
// Ghost User models from Clerk
// --------------------------------------------------------------------------------------
// These are not actually stored in the database, but are used to implement Zenstack's 
// access policies
// --------------------------------------------------------------------------------------

// Partial implementation of Clerk's Backend API User
// https://clerk.com/docs/references/backend/types/backend-user
// Only using fields which are useful for access policies

model User {
  id               String               @id @default(cuid())
  banned           Boolean
  created_at       DateTime             @default(now()) @db.Timestamptz
  last_sign_in_at  DateTime?
  primary_email    String? // Stored as an object in Clerk, but transformed to a string in `prismaEnhanced`
  primary_phone    String? // Stored as an object in Clerk, but transformed to a string in `prismaEnhanced`
  private_metadata UserPrivateMetadata?
  public_metadata  UserPublicMetadata?
  unsafe_metadata  UserUnsafeMetadata?

  @@auth
  @@deny('all', true)
  @@map("x_clerk_user")
}


// Clerk free-form Metadata objects
// https://clerk.com/docs/users/metadata#user-metadata
// Intended to be used to store additional info

model UserPrivateMetadata {
  id      String @id
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])

  // Special metadata keys here vvvvvvvvvv



  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  @@deny('all', true)
  @@map("x_clerk_user_private_metadata")
}

model UserPublicMetadata {
  id           String   @id
  user_id      String   @unique
  user         User     @relation(fields: [user_id], references: [id])
  
  // Special metadata keys here vvvvvvvvvv
  is_super_admin      Boolean?


  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  @@deny('all', true)
  @@map("x_clerk_user_public_metadata")
}

model UserUnsafeMetadata {
  id      String @id
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])

  // Special metadata keys here vvvvvvvvvv



  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  @@deny('all', true)
  @@map("x_clerk_user_unsafe_metadata")
}