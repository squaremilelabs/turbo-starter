model ClerkUserPublicMetadata {
  userId        String    @unique
  user          ClerkUser @relation(fields: [userId], references: [id])

  is_super_admin Boolean?
}

model ClerkUserPrivateMetadata {
  userId String    @unique
  user   ClerkUser @relation(fields: [userId], references: [id])

  api_key String?
}

model ClerkUserUnsafeMetadata {
  userId String    @unique
  user   ClerkUser @relation(fields: [userId], references: [id])
}

/// https://clerk.com/docs/references/javascript/user/user.
model ClerkUser {
  id                        String                    @id
  passwordEnabled           Boolean
  totpEnabled               Boolean
  backupCodeEnabled         Boolean
  twoFactorEnabled          Boolean
  banned                    Boolean
  locked                    Boolean
  createdAt                 Int
  updatedAt                 Int
  imageUrl                  String
  hasImage                  Boolean
  primaryEmailAddressId     String?                   @unique
  primaryEmailAddress       ClerkEmailAddress?        @relation("primaryEmailAddress", fields: [primaryEmailAddressId], references: [id])
  primaryPhoneNumberId      String?                   @unique
  primaryPhoneNumber        ClerkPhoneNumber?         @relation("primaryPhoneNumber", fields: [primaryPhoneNumberId], references: [id])
  primaryWeb3WalletId       String?
  primaryWeb3Wallet         Json?
  lastSignInAt              Int?
  externalId                String?
  username                  String?
  firstName                 String?
  lastName                  String?
  fullName                  String?
  publicMetadata            ClerkUserPublicMetadata?
  privateMetadata           ClerkUserPrivateMetadata?
  unsafeMetadata            ClerkUserUnsafeMetadata?
  emailAddresses            ClerkEmailAddress[]       @relation("emailAddresses")
  phoneNumbers              ClerkPhoneNumber[]        @relation("phoneNumbers")
  web3Wallets               Json[]
  externalAccounts          Json[]
  samlAccounts              Json[]
  lastActiveAt              Int?
  createOrganizationEnabled Boolean
  createOrganizationsLimit  Int?
  deleteSelfEnabled         Boolean
  legalAcceptedAt           Int?



  @@deny('all', true)
  @@map("x_backend_clerkuser")
  @@auth
}

model ClerkEmailAddress {
  id             String             @id
  userId        String             @unique
  emailAddress   String
  verification   ClerkVerification?

  user           ClerkUser          @relation("emailAddresses", fields: [userId], references: [id])
  primaryForUser ClerkUser?         @relation("primaryEmailAddress")
}

model ClerkPhoneNumber {
  id                      String             @id
  userId                 String             @unique
  phoneNumber             String
  reservedForSecondFactor Boolean
  defaultSecondFactor     Boolean
  verification            ClerkVerification?

  user                    ClerkUser          @relation("phoneNumbers", fields: [userId], references: [id])
  primaryForUser          ClerkUser?         @relation("primaryPhoneNumber")
}

model ClerkVerification {
  id             String                  @id
  emailAddressId String?                 @unique
  phoneNumberId  String?                 @unique
  status          ClerkVerificationStatus

  EmailAddress    ClerkEmailAddress?      @relation(fields: [emailAddressId], references: [id])
  phoneNumber     ClerkPhoneNumber?       @relation(fields: [phoneNumberId], references: [id])
}

enum ClerkVerificationStatus {
  unverified
  verified
  transferable
  failed
  expired
}